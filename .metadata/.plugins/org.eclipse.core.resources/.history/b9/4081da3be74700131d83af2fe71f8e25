package server;

import hearsay.listener.SocketProcessorListener;

import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.util.Map;
import java.io.DataInputStream;
import java.io.UnsupportedEncodingException;


/**
 * Represents a socket in the hearsay system
 * @author Subhasis Das
 *
 */
public class SocketProcessor extends hearsay.util.Loggable implements Runnable {

	private final InputStream childStream;   
	private final Socket clientSocket;
	private SocketProcessorListener spListener;
	private final Communicator comm;
private Map<Integer, Tab> tabs;
	
	public Map<Integer, Tab> getTabs() {
		return tabs;
	}


	public Communicator getComm() {
		return comm;
	}

	public SocketProcessorListener getSpListener() {
		return spListener;
	}

	public void setSpListener(SocketProcessorListener spListener) {
		this.spListener = spListener;
	}

	public SocketProcessor(Socket cSocket, Communicator communicator) throws IOException {
		clientSocket = cSocket;        
		SetLinePrefix("Socket#"+getId()+">");
		SetLogLevel(0);
		comm = communicator;

		log(1, "started");
		childStream = clientSocket.getInputStream();
		clientSocket.setTcpNoDelay(true);	
	}

	public int getId(){
		return clientSocket.getPort();
	}
	
	/**
	 * Run method to run this processor thread.
	 */
	public void run() {

		log(1, this.getClass().getSimpleName()+" :RUN");
		while (startReception());       
						
		// notify event listeners that socket was closed (possibly without notification)
		spListener.onDisconnect(this);

		try {
			if(!clientSocket.isClosed())
				clientSocket.close();
		} catch (IOException e) {}
	}


	private boolean startReception() {
		String message = receiveMessage();

		if(message == null)
			return false;

		if(!message.isEmpty()) {	// message not read yet
			log(1, " : Message Receive() works : message :"/*+message*/);
			
			//listener.onReceive
			spListener.onReceive(this, message);
		}
		return true;
	}


	private boolean	_ReadLengthMode = true;
	private int		_readPtr = 0;
	private byte[]	_readBuf = new byte[8];
	// states: _msgLength<0 - we read header, contain size of message (8 bytes) 
	//         _msgLength>=0 - header already read, now we're reading message 

	private String receiveMessage() {
		DataInputStream in = new DataInputStream(childStream);

		int readed;
		try {
			readed = in.read(_readBuf, _readPtr, _readBuf.length - _readPtr);
		} catch (IOException e1) {
			log(0, "receiveMessage: got read exception, session will be closed");
			log(1, "\t_readPtr="+_readPtr);
			log(1,  "\tBufSize="+_readBuf.length);
			log(1, "\tMode="+ _ReadLengthMode);
			log(0,  e1.getStackTrace().toString());
			return null;
		}
		if(readed == -1)
		{
			log(0," : receiveMessage: read -1, session will be closed");
			return null;
		}
		_readPtr += readed;

		String msg = "";

		if(_readPtr == _readBuf.length){
			_readPtr = 0;

			if(_ReadLengthMode) {
				int msglen;
				try
				{
					msglen = Integer.parseInt(new String(_readBuf));
				}
				catch (NumberFormatException e) 
				{
					log(1, " : receiveMessage: wrong length read, session will be closed");
					return null;
				}

				if(msglen <=0)
					log(1," : receiveMessage: bad length read: len=" + msglen + " skipped");
				else {
					_readBuf = new byte[msglen];
					_ReadLengthMode = false;
				}
			}
			else
			{
				// convert to String only the range of bytes that was filled         
				try { // convert from DynamivByteArray to string preserving Unicode encoding
					msg = new String(_readBuf, "UTF-8");
				} catch (UnsupportedEncodingException e) {
					log(1,"receiveMessage: message convert error, session will be closed");
					return null;
				}

				log(1, "receiveMessage: got message, size=" + _readBuf.length);
				_ReadLengthMode = true;
				_readBuf = new byte[8];
			}
		}
		return msg;
	}


	public synchronized void send(String msg) throws IOException {
		byte[] msgb = msg.getBytes("UTF-8");
		String msg_len = String.valueOf(msgb.length);
		msg_len = "00000000".substring(msg_len.length())+msg_len;
		byte[] msg_lenb = msg_len.getBytes("UTF-8");
		clientSocket.getOutputStream().write(msg_lenb);
		clientSocket.getOutputStream().write(msgb);
	}
}


